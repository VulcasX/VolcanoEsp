#ifndef _MFOC_MODIFIED_H_
#define _MFOC_MODIFIED_H_

#include <Arduino.h>
#include "mfcuk_types.h"
#include "mfcuk_crypto.h"

// Utilizziamo le stesse costanti definite in mfoc.h
// Per evitare ridefinizioni, non le dichiariamo di nuovo

// Struttura per memorizzare la chiave
typedef struct {
    uint8_t bytes[MIFARE_KEY_SIZE];
} MfocKey;

// Struttura per memorizzare le informazioni del settore
typedef struct {
    uint8_t trailerBlock;    // Numero del blocco trailer
    MfocKey KeyA;           // Chiave A
    MfocKey KeyB;           // Chiave B
    bool foundKeyA;         // Flag per indicare se la chiave A è stata trovata
    bool foundKeyB;         // Flag per indicare se la chiave B è stata trovata
} MfocSector;

// Struttura per memorizzare le informazioni della carta
typedef struct {
    uint32_t uid;                      // ID univoco della carta
    uint8_t num_sectors;              // Numero di settori
    MfocSector sectors[MIFARE_MAXSECTOR]; // Dati dei settori
} MfocCard;

// Riutilizziamo le strutture definite in mfoc.h
// Non le ridefiniremo qui per evitare conflitti

// Configurazione per MFOC - Mantenuta compatibilità con la struttura originale
// ma usiamo una versione adattata per il nuovo sistema
typedef struct {
    uint8_t known_key_type;      // Tipo di chiave conosciuta (A o B)
    MifareKey known_key;         // Chiave conosciuta 
    uint8_t target_sector;       // Settore target
    uint8_t target_key_type;     // Tipo di chiave target (A o B)
    uint32_t max_iterations;     // Numero massimo di iterazioni
    uint32_t num_probes;         // Numero di tentativi per settore
    uint32_t sets;               // Numero di set di chiavi
    uint32_t tolerance;          // Tolleranza per le distanze di nonce
    bool load_keys_from_file;    // Caricare chiavi da file
    char keys_file[32];          // Nome file per le chiavi
} MfocConfigMod;

// Funzioni principali - utilizziamo nomi diversi per evitare conflitti
void mfoc_menu_mod();
void mfoc_config_mod();
bool mfoc_run_mod(MfocConfigMod* config, MfocCard* card = nullptr);

// Funzioni di configurazione - utilizziamo nomi diversi per evitare conflitti
void mfoc_set_known_key_mod();
void mfoc_set_known_key_type_mod();
void mfoc_set_target_mod();
void mfoc_set_key_file_mod();
void mfoc_set_iterations_mod();

// Funzioni di utilità - utilizziamo nomi diversi per evitare conflitti
bool mfoc_load_keys_from_file_mod(const char* filename, mfoc_pKeys* keys);
void mfoc_update_progress_mod(int progress, const char* status);
uint32_t mfoc_median_mod(mfoc_denonce* d);
int mfoc_compare_keys_mod(const void* a, const void* b);
mfoc_countKeys* mfoc_uniqsort_keys_mod(uint64_t* possibleKeys, uint32_t size);
bool mfoc_valid_nonce_mod(uint32_t Nt, uint32_t NtEnc, uint32_t Ks1, uint8_t* parity);

// Funzioni di attacco - utilizziamo nomi diversi per evitare conflitti
int mfoc_enhanced_auth_mod(uint8_t e_sector, uint8_t a_sector, MfocCard* card, 
                     mfoc_denonce* d, mfoc_pKeys* pk, char mode, bool dumpKeysA);
int mfoc_find_exploit_sector_mod(MfocCard* card);
bool mfoc_collect_nonces_mod(MfocCard* card, uint8_t sector, mfoc_denonce* d);
bool mfoc_recover_key_mod(MfocCard* card, uint8_t sector, uint8_t key_type, mfoc_denonce* d, mfoc_pKeys* pk);

// File manager per le chiavi - utilizziamo nomi diversi per evitare conflitti
bool mfoc_select_key_file_mod(char* filename, size_t max_len);

// Funzione per navigare nel filesystem - questa è unica
String browse_files(const char* directory);

#endif // _MFOC_MODIFIED_H_
